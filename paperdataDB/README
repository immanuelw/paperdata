The paperdataDB module is a wrapper around the paperdata MySQL database and
table *paperdata*. This module supplies functions to allow the user to more
easily (without knowledge of SQL syntax) search for specific information
within the paperdata database and table.

Input is in the format of list of lists, with each list pertaining to a field:
[field_name, search_field_constant, field_range_specifier, field_range_list]

A list of lists is made from these building blocks and that is the input into
the main function of the module.

EXAMPLE:
>>> info_list = [['era', NOSEARCH, EXACT, [32]], ['path', SEARCH, NONE, []],
['julian_day', SEARCH, RANGE, [922, 935]]]
OR
>>> info_list = [[ERA, NOSEARCH, EXACT, [32]], [PATH, SEARCH, NONE, []],
[JDAY, SEARCH, RANGE, [922, 935]]]

Functions (must be paperdataDB.function_name):

paperdataDB.fetch(info_list)
	Returns a SQL string which can be used to find the information that is
	being searched for in any MySQL module or program.

paperdataDB.dbsearch(query)
	Returns a list of information depending on the query input into the
	function. Simple MySQLdb wrapper to only search queries.

paperdataDB.dbsearch_dict(query)
	Returns a dictionary with the field outputs as keys and the field data
	as lists. Same as dbsearch but output as dict.


info_list can be generated by hand -- or simply use search_paperdata.py to create query
*Can now be generated through class definition:

Classes and their functions (must be paperdataDB.class_name and
						paperdataDB.class_name.function_name):

searchobj
	Creates an empty object to load search information into
	-- outputs info_list(see below)

* __init__:
	creates empty list

* return(field, output_bool, limit, range):
	Main function of class -- appends the variable to info_list
				instantiated in __init__ function.

* output(info_list):
	Run after list is complete --
	Outputs data requested in list of entries in paperdata

* output_dict(info_list):
	Run after list is complete --
	Outputs data requested through dictionary with
	field as key and list of outputs of field as value.

>>> import paperdataDB as pdb
>>> db_query = pdb.fetch(info_list)
>>> db_query
SELECT path, julian_day from paperdata WHERE era = 32 and julian_day >= 922
and julian_day <= 935

DB_QUERY can be generated through search_paperdata.py

>>> db_information = pdb.dbsearch(pdb.fetch(info_list))
OR
>>> db_information = pdb.dbsearch(db_query)

With db_information being a list of all the information requested from the
query.

*db_information gives the same information as searchobj.output()

List of named constants and purpose:

**Field name**

*PATH* - path
*ERA* - era
*ERA_TYPE* - era_type
*OBSNUM* - obsnum
*MD5SUM* - md5sum
*JDAY* - julian_day
*JDATE* - julian_date
*POL* - polarization
*LENGTH* - data_length
*RAW_PATH* - raw_location
*CAL_PATH* - cal_location
*TAPE_PATH* - tape_location
*COMPR_SIZE* - compr_file_size_MB
*RAW_SIZE* - raw_file_sisze_MB
*COMPRESSED* - compressed
*READY_TO_TAPE* - ready_to_tape
*DELETE_FILE* - delete_file
*RESTORE_HISTORY* - restore_history
*COMMENTS* - comments

**Field range specifier**

*MIN* - Look for values greater than or equal to
*MAX* - Look for values less than or equal to
*EXACT* - Look for exact value
*RANGE* - Look for values within input range
*NONE* - Do not include the input field name as a search limiter

**Search field constant**

*SEARCH* - Look for the input field name as an output
*NOSEARCH* - Do not look for the input field name as an output
