The pyganglia module is a wrapper around the ganglia MySQL database and its tables.
This module supplies functions to allow the user to more easily
(without knowledge of SQL syntax) search for specific information
within the ganglia database and its tables.

Input is in the format of list of lists, with each list pertaining to a field:
[field_name, search_field_constant, field_range_specifier, field_range_list]

A list of lists is made from these building blocks and that is the input into
the main function of the module.

EXAMPLE:
>>> info_list = [['cpu', NOSEARCH, EXACT, [2]], ['time_date', SEARCH, NONE, []],
['read_s', SEARCH, RANGE, [922, 935]]]
OR
>>> info_list = [[CPU, NOSEARCH, EXACT, [2]], [TIME_DATE, SEARCH, NONE, []],
[READ_S, SEARCH, RANGE, [922, 935]]]

Functions (must be pyganglia.function_name):

pyganglia.fetch(info_list, db_dict, var_flo, var_str, var_int, table)
	Returns a SQL string which can be used to find the information that is
	being searched for in any MySQL module or program.

pyganglia.dbsearch(query)
	Returns a list of information depending on the query input into the
	function. Simple MySQLdb wrapper to only search queries.

pyganglia.dbsearch_dict(query)
	Returns a dictionary with the field outputs as keys and the field data
	as lists. Same as dbsearch but output as dict.


info_list can be generated by hand -- or simply use search_ganglia.py to create query
*Can now be generated through class definition:

Classes and their functions (must be pyganglia.class_name and
						pyganglia.class_name.function_name):

monitor_files
ram
iostat
cpu
	Creates named constants for each table in class
	* field names are named constants in ALL CAPS
	class.db_dict, class.var_flo, class.var_str, class.var_int, class.table
		-- variables used for search object

searchobj
	Creates an empty object to load search information into
	-- outputs info_list(see below)

* __init__(db_dict, var_flo, var_str, var_int, table):
	creates empty list
	instantiates which table is being used through use of classes

* add_to_output(field, output_bool, limit, range):
	Main function of class -- appends the variable to info_list
				instantiated in __init__ function.
	-- input is simply the items that would be in a single element of info_list
		Ex: searchobj.add_to_output('CPU', pyg.SEARCH, pyg.RANGE, 3, 7)
			will add this search entry, [cpu, pyg.SEARCH, pyg.RANGE, (3,7)], to info_list.

* output():
	Run after list is complete --
	Outputs data requested in list of entries in paperdata

* output_dict():
	Run after list is complete --
	Outputs data requested through dictionary with
	field as key and list of outputs of field as value.

>>> import pyganglia as pyg
>>> db_query = pyg.fetch(info_list, db_dict, var_flo, var_str, var_int, table)
>>> db_query
SELECT path, julian_day from paperdata WHERE cpu = 2 and read_s >= 922
and read_s <= 935

DB_QUERY can be generated through search_paperdata.py

>>> db_information = pyg.dbsearch(pyg.fetch(info_list, db_dict, var_flo, var_str, var_int, table))
OR
>>> db_information = pyg.dbsearch(db_query)

With db_information being a list of all the information requested from the
query.

*db_information gives the same information as searchobj.output()

List of named constants and purpose:

**Field range specifier**

*MIN* - Look for values greater than or equal to
*MAX* - Look for values less than or equal to
*EXACT* - Look for exact value
*RANGE* - Look for values within input range
*NONE* - Do not include the input field name as a search limiter

**Search field constant**

*SEARCH* - Look for the input field name as an output
*NOSEARCH* - Do not look for the input field name as an output
